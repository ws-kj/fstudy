{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/wskj/src/fstudy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/wskj/src/fstudy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar multihashing = require('multihashing-async');\n\nvar protobuf = require('protons');\n\nvar bs58 = require('bs58');\n\nvar crypto = require('./ed25519');\n\nvar pbm = protobuf(require('./keys.proto'));\n\nvar Ed25519PublicKey = /*#__PURE__*/function () {\n  function Ed25519PublicKey(key) {\n    _classCallCheck(this, Ed25519PublicKey);\n\n    this._key = ensureKey(key, crypto.publicKeyLength);\n  }\n\n  _createClass(Ed25519PublicKey, [{\n    key: \"verify\",\n    value: function verify(data, sig, callback) {\n      ensure(callback);\n      crypto.hashAndVerify(this._key, sig, data, callback);\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return Buffer.from(this._key);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PublicKey.encode({\n        Type: pbm.KeyType.Ed25519,\n        Data: this.marshal()\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(callback) {\n      ensure(callback);\n      multihashing(this.bytes, 'sha2-256', callback);\n    }\n  }]);\n\n  return Ed25519PublicKey;\n}();\n\nvar Ed25519PrivateKey = /*#__PURE__*/function () {\n  // key       - 64 byte Uint8Array or Buffer containing private key\n  // publicKey - 32 byte Uint8Array or Buffer containing public key\n  function Ed25519PrivateKey(key, publicKey) {\n    _classCallCheck(this, Ed25519PrivateKey);\n\n    this._key = ensureKey(key, crypto.privateKeyLength);\n    this._publicKey = ensureKey(publicKey, crypto.publicKeyLength);\n  }\n\n  _createClass(Ed25519PrivateKey, [{\n    key: \"sign\",\n    value: function sign(message, callback) {\n      ensure(callback);\n      crypto.hashAndSign(this._key, message, callback);\n    }\n  }, {\n    key: \"public\",\n    get: function get() {\n      if (!this._publicKey) {\n        throw new Error('public key not provided');\n      }\n\n      return new Ed25519PublicKey(this._publicKey);\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return Buffer.concat([Buffer.from(this._key), Buffer.from(this._publicKey)]);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PrivateKey.encode({\n        Type: pbm.KeyType.Ed25519,\n        Data: this.marshal()\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(callback) {\n      ensure(callback);\n      multihashing(this.bytes, 'sha2-256', callback);\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @param {function(Error, id)} callback\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"id\",\n    value: function id(callback) {\n      this.public.hash(function (err, hash) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, bs58.encode(hash));\n      });\n    }\n  }]);\n\n  return Ed25519PrivateKey;\n}();\n\nfunction unmarshalEd25519PrivateKey(bytes, callback) {\n  try {\n    bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength);\n  } catch (err) {\n    return callback(err);\n  }\n\n  var privateKeyBytes = bytes.slice(0, crypto.privateKeyLength);\n  var publicKeyBytes = bytes.slice(crypto.privateKeyLength, bytes.length);\n  callback(null, new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes));\n}\n\nfunction unmarshalEd25519PublicKey(bytes) {\n  bytes = ensureKey(bytes, crypto.publicKeyLength);\n  return new Ed25519PublicKey(bytes);\n}\n\nfunction generateKeyPair(_bits, cb) {\n  if (cb === undefined && typeof _bits === 'function') {\n    cb = _bits;\n  }\n\n  crypto.generateKey(function (err, keys) {\n    if (err) {\n      return cb(err);\n    }\n\n    var privkey;\n\n    try {\n      privkey = new Ed25519PrivateKey(keys.secretKey, keys.publicKey);\n    } catch (err) {\n      cb(err);\n      return;\n    }\n\n    cb(null, privkey);\n  });\n}\n\nfunction generateKeyPairFromSeed(seed, _bits, cb) {\n  if (cb === undefined && typeof _bits === 'function') {\n    cb = _bits;\n  }\n\n  crypto.generateKeyFromSeed(seed, function (err, keys) {\n    if (err) {\n      return cb(err);\n    }\n\n    var privkey;\n\n    try {\n      privkey = new Ed25519PrivateKey(keys.secretKey, keys.publicKey);\n    } catch (err) {\n      cb(err);\n      return;\n    }\n\n    cb(null, privkey);\n  });\n}\n\nfunction ensure(cb) {\n  if (typeof cb !== 'function') {\n    throw new Error('callback is required');\n  }\n}\n\nfunction ensureKey(key, length) {\n  if (Buffer.isBuffer(key)) {\n    key = new Uint8Array(key);\n  }\n\n  if (!(key instanceof Uint8Array) || key.length !== length) {\n    throw new Error('Key must be a Uint8Array or Buffer of length ' + length);\n  }\n\n  return key;\n}\n\nmodule.exports = {\n  Ed25519PublicKey: Ed25519PublicKey,\n  Ed25519PrivateKey: Ed25519PrivateKey,\n  unmarshalEd25519PrivateKey: unmarshalEd25519PrivateKey,\n  unmarshalEd25519PublicKey: unmarshalEd25519PublicKey,\n  generateKeyPair: generateKeyPair,\n  generateKeyPairFromSeed: generateKeyPairFromSeed\n};","map":{"version":3,"sources":["/home/wskj/src/node_modules/peer-info/node_modules/libp2p-crypto/src/keys/ed25519-class.js"],"names":["multihashing","require","protobuf","bs58","crypto","pbm","Ed25519PublicKey","key","_key","ensureKey","publicKeyLength","data","sig","callback","ensure","hashAndVerify","Buffer","from","PublicKey","encode","Type","KeyType","Ed25519","Data","marshal","bytes","equals","Ed25519PrivateKey","publicKey","privateKeyLength","_publicKey","message","hashAndSign","Error","concat","PrivateKey","public","hash","err","unmarshalEd25519PrivateKey","privateKeyBytes","slice","publicKeyBytes","length","unmarshalEd25519PublicKey","generateKeyPair","_bits","cb","undefined","generateKey","keys","privkey","secretKey","generateKeyPairFromSeed","seed","generateKeyFromSeed","isBuffer","Uint8Array","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst multihashing = require('multihashing-async')\nconst protobuf = require('protons')\nconst bs58 = require('bs58')\n\nconst crypto = require('./ed25519')\nconst pbm = protobuf(require('./keys.proto'))\n\nclass Ed25519PublicKey {\n  constructor (key) {\n    this._key = ensureKey(key, crypto.publicKeyLength)\n  }\n\n  verify (data, sig, callback) {\n    ensure(callback)\n    crypto.hashAndVerify(this._key, sig, data, callback)\n  }\n\n  marshal () {\n    return Buffer.from(this._key)\n  }\n\n  get bytes () {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.Ed25519,\n      Data: this.marshal()\n    })\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n}\n\nclass Ed25519PrivateKey {\n  // key       - 64 byte Uint8Array or Buffer containing private key\n  // publicKey - 32 byte Uint8Array or Buffer containing public key\n  constructor (key, publicKey) {\n    this._key = ensureKey(key, crypto.privateKeyLength)\n    this._publicKey = ensureKey(publicKey, crypto.publicKeyLength)\n  }\n\n  sign (message, callback) {\n    ensure(callback)\n    crypto.hashAndSign(this._key, message, callback)\n  }\n\n  get public () {\n    if (!this._publicKey) {\n      throw new Error('public key not provided')\n    }\n\n    return new Ed25519PublicKey(this._publicKey)\n  }\n\n  marshal () {\n    return Buffer.concat([Buffer.from(this._key), Buffer.from(this._publicKey)])\n  }\n\n  get bytes () {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.Ed25519,\n      Data: this.marshal()\n    })\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @param {function(Error, id)} callback\n   * @returns {undefined}\n   */\n  id (callback) {\n    this.public.hash((err, hash) => {\n      if (err) {\n        return callback(err)\n      }\n      callback(null, bs58.encode(hash))\n    })\n  }\n}\n\nfunction unmarshalEd25519PrivateKey (bytes, callback) {\n  try {\n    bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength)\n  } catch (err) {\n    return callback(err)\n  }\n  const privateKeyBytes = bytes.slice(0, crypto.privateKeyLength)\n  const publicKeyBytes = bytes.slice(crypto.privateKeyLength, bytes.length)\n  callback(null, new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes))\n}\n\nfunction unmarshalEd25519PublicKey (bytes) {\n  bytes = ensureKey(bytes, crypto.publicKeyLength)\n  return new Ed25519PublicKey(bytes)\n}\n\nfunction generateKeyPair (_bits, cb) {\n  if (cb === undefined && typeof _bits === 'function') {\n    cb = _bits\n  }\n\n  crypto.generateKey((err, keys) => {\n    if (err) {\n      return cb(err)\n    }\n    let privkey\n    try {\n      privkey = new Ed25519PrivateKey(keys.secretKey, keys.publicKey)\n    } catch (err) {\n      cb(err)\n      return\n    }\n\n    cb(null, privkey)\n  })\n}\n\nfunction generateKeyPairFromSeed (seed, _bits, cb) {\n  if (cb === undefined && typeof _bits === 'function') {\n    cb = _bits\n  }\n\n  crypto.generateKeyFromSeed(seed, (err, keys) => {\n    if (err) {\n      return cb(err)\n    }\n    let privkey\n    try {\n      privkey = new Ed25519PrivateKey(keys.secretKey, keys.publicKey)\n    } catch (err) {\n      cb(err)\n      return\n    }\n\n    cb(null, privkey)\n  })\n}\n\nfunction ensure (cb) {\n  if (typeof cb !== 'function') {\n    throw new Error('callback is required')\n  }\n}\n\nfunction ensureKey (key, length) {\n  if (Buffer.isBuffer(key)) {\n    key = new Uint8Array(key)\n  }\n  if (!(key instanceof Uint8Array) || key.length !== length) {\n    throw new Error('Key must be a Uint8Array or Buffer of length ' + length)\n  }\n  return key\n}\n\nmodule.exports = {\n  Ed25519PublicKey,\n  Ed25519PrivateKey,\n  unmarshalEd25519PrivateKey,\n  unmarshalEd25519PublicKey,\n  generateKeyPair,\n  generateKeyPairFromSeed\n}\n"]},"metadata":{},"sourceType":"script"}