{"ast":null,"code":"'use strict';\n\nvar protons = require('protons');\n\nvar pb = protons(require('./unixfs.proto')); // encode/decode\n\nvar unixfsData = pb.Data; // const unixfsMetadata = pb.MetaData // encode/decode\n\nvar types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nvar dirTypes = ['directory', 'hamt-sharded-directory'];\n\nfunction Data(type, data) {\n  var _this = this;\n\n  if (!(this instanceof Data)) {\n    return new Data(type, data);\n  }\n\n  if (types.indexOf(type) === -1) {\n    throw new Error('Type: ' + type + ' is not valid');\n  }\n\n  this.type = type;\n  this.data = data;\n  this.blockSizes = [];\n\n  this.addBlockSize = function (size) {\n    _this.blockSizes.push(size);\n  };\n\n  this.removeBlockSize = function (index) {\n    _this.blockSizes.splice(index, 1);\n  }; // data.length + blockSizes\n\n\n  this.fileSize = function () {\n    if (dirTypes.indexOf(_this.type) >= 0) {\n      // dirs don't have file size\n      return undefined;\n    }\n\n    var sum = 0;\n\n    _this.blockSizes.forEach(function (size) {\n      sum += size;\n    });\n\n    if (data) {\n      sum += data.length;\n    }\n\n    return sum;\n  }; // encode to protobuf\n\n\n  this.marshal = function () {\n    var type;\n\n    switch (_this.type) {\n      case 'raw':\n        type = unixfsData.DataType.Raw;\n        break;\n\n      case 'directory':\n        type = unixfsData.DataType.Directory;\n        break;\n\n      case 'file':\n        type = unixfsData.DataType.File;\n        break;\n\n      case 'metadata':\n        type = unixfsData.DataType.Metadata;\n        break;\n\n      case 'symlink':\n        type = unixfsData.DataType.Symlink;\n        break;\n\n      case 'hamt-sharded-directory':\n        type = unixfsData.DataType.HAMTShard;\n        break;\n\n      default:\n        throw new Error(\"Unkown type: \\\"\".concat(_this.type, \"\\\"\"));\n    }\n\n    var fileSize = _this.fileSize();\n\n    var data = _this.data;\n\n    if (!_this.data || !_this.data.length) {\n      data = undefined;\n    }\n\n    var blockSizes = _this.blockSizes;\n\n    if (!_this.blockSizes || !_this.blockSizes.length) {\n      blockSizes = undefined;\n    }\n\n    return unixfsData.encode({\n      Type: type,\n      Data: data,\n      filesize: fileSize,\n      blocksizes: blockSizes,\n      hashType: _this.hashType,\n      fanout: _this.fanout\n    });\n  };\n} // decode from protobuf https://github.com/ipfs/go-ipfs/blob/master/unixfs/format.go#L24\n\n\nData.unmarshal = function (marsheled) {\n  var decoded = unixfsData.decode(marsheled);\n\n  if (!decoded.Data) {\n    decoded.Data = undefined;\n  }\n\n  var obj = new Data(types[decoded.Type], decoded.Data);\n  obj.blockSizes = decoded.blocksizes;\n  return obj;\n};\n\nexports = module.exports = Data;","map":{"version":3,"sources":["/home/wskj/src/node_modules/ipfs-unixfs/src/index.js"],"names":["protons","require","pb","unixfsData","Data","types","dirTypes","type","data","indexOf","Error","blockSizes","addBlockSize","size","push","removeBlockSize","index","splice","fileSize","undefined","sum","forEach","length","marshal","DataType","Raw","Directory","File","Metadata","Symlink","HAMTShard","encode","Type","filesize","blocksizes","hashType","fanout","unmarshal","marsheled","decoded","decode","obj","exports","module"],"mappings":"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","sourcesContent":["'use strict'\n\nconst protons = require('protons')\nconst pb = protons(require('./unixfs.proto'))\n// encode/decode\nconst unixfsData = pb.Data\n// const unixfsMetadata = pb.MetaData // encode/decode\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nfunction Data (type, data) {\n  if (!(this instanceof Data)) {\n    return new Data(type, data)\n  }\n  if (types.indexOf(type) === -1) {\n    throw new Error('Type: ' + type + ' is not valid')\n  }\n\n  this.type = type\n  this.data = data\n  this.blockSizes = []\n\n  this.addBlockSize = (size) => {\n    this.blockSizes.push(size)\n  }\n\n  this.removeBlockSize = (index) => {\n    this.blockSizes.splice(index, 1)\n  }\n\n  // data.length + blockSizes\n  this.fileSize = () => {\n    if (dirTypes.indexOf(this.type) >= 0) {\n      // dirs don't have file size\n      return undefined\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n    if (data) {\n      sum += data.length\n    }\n    return sum\n  }\n\n  // encode to protobuf\n  this.marshal = () => {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = unixfsData.DataType.Raw; break\n      case 'directory': type = unixfsData.DataType.Directory; break\n      case 'file': type = unixfsData.DataType.File; break\n      case 'metadata': type = unixfsData.DataType.Metadata; break\n      case 'symlink': type = unixfsData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = unixfsData.DataType.HAMTShard; break\n      default:\n        throw new Error(`Unkown type: \"${this.type}\"`)\n    }\n    let fileSize = this.fileSize()\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let blockSizes = this.blockSizes\n\n    if (!this.blockSizes || !this.blockSizes.length) {\n      blockSizes = undefined\n    }\n\n    return unixfsData.encode({\n      Type: type,\n      Data: data,\n      filesize: fileSize,\n      blocksizes: blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout\n    })\n  }\n}\n\n// decode from protobuf https://github.com/ipfs/go-ipfs/blob/master/unixfs/format.go#L24\nData.unmarshal = (marsheled) => {\n  const decoded = unixfsData.decode(marsheled)\n  if (!decoded.Data) {\n    decoded.Data = undefined\n  }\n  const obj = new Data(types[decoded.Type], decoded.Data)\n  obj.blockSizes = decoded.blocksizes\n  return obj\n}\n\nexports = module.exports = Data\n"]},"metadata":{},"sourceType":"script"}