{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/will/src/fstudy/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/will/src/fstudy/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar CID = require('cids');\n\nvar assert = require('assert');\n\nvar withIs = require('class-is'); // Link represents an IPFS Merkle DAG Link between Nodes.\n\n\nvar DAGLink = /*#__PURE__*/function () {\n  function DAGLink(name, size, multihash) {\n    _classCallCheck(this, DAGLink);\n\n    assert(multihash, 'A link requires a multihash to point to'); // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || '';\n    this._size = size;\n    this._cid = new CID(multihash);\n  }\n\n  _createClass(DAGLink, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"DAGLink <\".concat(this._cid.toBaseEncodedString(), \" - name: \\\"\").concat(this.name, \"\\\", size: \").concat(this.size, \">\");\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (!this._json) {\n        this._json = Object.freeze({\n          name: this.name,\n          size: this.size,\n          multihash: this._cid.toBaseEncodedString()\n        });\n      }\n\n      return Object.assign({}, this._json);\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    },\n    set: function set(name) {\n      throw new Error(\"Can't set property: 'name' is immutable\");\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._size;\n    },\n    set: function set(size) {\n      throw new Error(\"Can't set property: 'size' is immutable\");\n    }\n  }, {\n    key: \"multihash\",\n    get: function get() {\n      return this._cid.buffer;\n    },\n    set: function set(multihash) {\n      throw new Error(\"Can't set property: 'multihash' is immutable\");\n    }\n  }, {\n    key: \"cid\",\n    get: function get() {\n      return this._cid;\n    },\n    set: function set(cid) {\n      throw new Error(\"Can't set property: 'cid' is immutable\");\n    }\n  }]);\n\n  return DAGLink;\n}();\n\nexports = module.exports = withIs(DAGLink, {\n  className: 'DAGLink',\n  symbolName: '@ipld/js-ipld-dag-pb/daglink'\n});\nexports.create = require('./create');\nexports.util = require('./util');","map":{"version":3,"sources":["/home/will/src/fstudy/client/node_modules/ipld-dag-pb/src/dag-link/index.js"],"names":["CID","require","assert","withIs","DAGLink","name","size","multihash","_name","_size","_cid","toBaseEncodedString","_json","Object","freeze","assign","Error","buffer","cid","exports","module","className","symbolName","create","util"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB,C,CAEA;;;IACMG,O;AACJ,mBAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,SAAzB,EAAoC;AAAA;;AAClCL,IAAAA,MAAM,CAACK,SAAD,EAAY,yCAAZ,CAAN,CADkC,CAElC;AACA;AACA;;AAEA,SAAKC,KAAL,GAAaH,IAAI,IAAI,EAArB;AACA,SAAKI,KAAL,GAAaH,IAAb;AACA,SAAKI,IAAL,GAAY,IAAIV,GAAJ,CAAQO,SAAR,CAAZ;AACD;;;;WAED,oBAAY;AACV,gCAAmB,KAAKG,IAAL,CAAUC,mBAAV,EAAnB,wBAA+D,KAAKN,IAApE,uBAAoF,KAAKC,IAAzF;AACD;;;WAED,kBAAU;AACR,UAAI,CAAC,KAAKM,KAAV,EAAiB;AACf,aAAKA,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc;AACzBT,UAAAA,IAAI,EAAE,KAAKA,IADc;AAEzBC,UAAAA,IAAI,EAAE,KAAKA,IAFc;AAGzBC,UAAAA,SAAS,EAAE,KAAKG,IAAL,CAAUC,mBAAV;AAHc,SAAd,CAAb;AAKD;;AAED,aAAOE,MAAM,CAACE,MAAP,CAAc,EAAd,EAAkB,KAAKH,KAAvB,CAAP;AACD;;;SAED,eAAY;AACV,aAAO,KAAKJ,KAAZ;AACD,K;SAED,aAAUH,IAAV,EAAgB;AACd,YAAM,IAAIW,KAAJ,CAAU,yCAAV,CAAN;AACD;;;SAED,eAAY;AACV,aAAO,KAAKP,KAAZ;AACD,K;SAED,aAAUH,IAAV,EAAgB;AACd,YAAM,IAAIU,KAAJ,CAAU,yCAAV,CAAN;AACD;;;SAED,eAAiB;AACf,aAAO,KAAKN,IAAL,CAAUO,MAAjB;AACD,K;SAED,aAAeV,SAAf,EAA0B;AACxB,YAAM,IAAIS,KAAJ,CAAU,8CAAV,CAAN;AACD;;;SAED,eAAW;AACT,aAAO,KAAKN,IAAZ;AACD,K;SAED,aAASQ,GAAT,EAAc;AACZ,YAAM,IAAIF,KAAJ,CAAU,wCAAV,CAAN;AACD;;;;;;AAGHG,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBhB,MAAM,CAACC,OAAD,EAAU;AAAEiB,EAAAA,SAAS,EAAE,SAAb;AAAwBC,EAAAA,UAAU,EAAE;AAApC,CAAV,CAAjC;AACAH,OAAO,CAACI,MAAR,GAAiBtB,OAAO,CAAC,UAAD,CAAxB;AACAkB,OAAO,CAACK,IAAR,GAAevB,OAAO,CAAC,QAAD,CAAtB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst assert = require('assert')\nconst withIs = require('class-is')\n\n// Link represents an IPFS Merkle DAG Link between Nodes.\nclass DAGLink {\n  constructor (name, size, multihash) {\n    assert(multihash, 'A link requires a multihash to point to')\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || ''\n    this._size = size\n    this._cid = new CID(multihash)\n  }\n\n  toString () {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.name}\", size: ${this.size}>`\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.name,\n        size: this.size,\n        multihash: this._cid.toBaseEncodedString()\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  get name () {\n    return this._name\n  }\n\n  set name (name) {\n    throw new Error(\"Can't set property: 'name' is immutable\")\n  }\n\n  get size () {\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get multihash () {\n    return this._cid.buffer\n  }\n\n  set multihash (multihash) {\n    throw new Error(\"Can't set property: 'multihash' is immutable\")\n  }\n\n  get cid () {\n    return this._cid\n  }\n\n  set cid (cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGLink, { className: 'DAGLink', symbolName: '@ipld/js-ipld-dag-pb/daglink' })\nexports.create = require('./create')\nexports.util = require('./util')\n"]},"metadata":{},"sourceType":"script"}