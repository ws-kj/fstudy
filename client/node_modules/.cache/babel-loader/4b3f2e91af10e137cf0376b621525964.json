{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/wskj/src/fstudy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/wskj/src/fstudy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar multihashing = require('multihashing-async');\n\nvar protobuf = require('protons');\n\nvar bs58 = require('bs58');\n\nvar crypto = require('./rsa');\n\nvar pbm = protobuf(require('./keys.proto'));\n\nvar forge = require('node-forge');\n\nvar setImmediate = require('async/setImmediate');\n\nvar RsaPublicKey = /*#__PURE__*/function () {\n  function RsaPublicKey(key) {\n    _classCallCheck(this, RsaPublicKey);\n\n    this._key = key;\n  }\n\n  _createClass(RsaPublicKey, [{\n    key: \"verify\",\n    value: function verify(data, sig, callback) {\n      ensure(callback);\n      crypto.hashAndVerify(this._key, sig, data, callback);\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return crypto.utils.jwkToPkix(this._key);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PublicKey.encode({\n        Type: pbm.KeyType.RSA,\n        Data: this.marshal()\n      });\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(bytes) {\n      return this._key.encrypt(bytes, 'RSAES-PKCS1-V1_5');\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(callback) {\n      ensure(callback);\n      multihashing(this.bytes, 'sha2-256', callback);\n    }\n  }]);\n\n  return RsaPublicKey;\n}();\n\nvar RsaPrivateKey = /*#__PURE__*/function () {\n  // key       - Object of the jwk format\n  // publicKey - Buffer of the spki format\n  function RsaPrivateKey(key, publicKey) {\n    _classCallCheck(this, RsaPrivateKey);\n\n    this._key = key;\n    this._publicKey = publicKey;\n  }\n\n  _createClass(RsaPrivateKey, [{\n    key: \"genSecret\",\n    value: function genSecret() {\n      return crypto.getRandomValues(new Uint8Array(16));\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(message, callback) {\n      ensure(callback);\n      crypto.hashAndSign(this._key, message, callback);\n    }\n  }, {\n    key: \"public\",\n    get: function get() {\n      if (!this._publicKey) {\n        throw new Error('public key not provided');\n      }\n\n      return new RsaPublicKey(this._publicKey);\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(msg, callback) {\n      crypto.decrypt(this._key, msg, callback);\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return crypto.utils.jwkToPkcs1(this._key);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PrivateKey.encode({\n        Type: pbm.KeyType.RSA,\n        Data: this.marshal()\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(callback) {\n      ensure(callback);\n      multihashing(this.bytes, 'sha2-256', callback);\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @param {function(Error, id)} callback\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"id\",\n    value: function id(callback) {\n      this.public.hash(function (err, hash) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, bs58.encode(hash));\n      });\n    }\n    /**\n     * Exports the key into a password protected PEM format\n     *\n     * @param {string} [format] - Defaults to 'pkcs-8'.\n     * @param {string} password - The password to read the encrypted PEM\n     * @param {function(Error, KeyInfo)} callback\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"export\",\n    value: function _export(format, password, callback) {\n      var _this = this;\n\n      if (typeof password === 'function') {\n        callback = password;\n        password = format;\n        format = 'pkcs-8';\n      }\n\n      ensure(callback);\n      setImmediate(function () {\n        var err = null;\n        var pem = null;\n\n        try {\n          var buffer = new forge.util.ByteBuffer(_this.marshal());\n          var asn1 = forge.asn1.fromDer(buffer);\n          var privateKey = forge.pki.privateKeyFromAsn1(asn1);\n\n          if (format === 'pkcs-8') {\n            var options = {\n              algorithm: 'aes256',\n              count: 10000,\n              saltSize: 128 / 8,\n              prfAlgorithm: 'sha512'\n            };\n            pem = forge.pki.encryptRsaPrivateKey(privateKey, password, options);\n          } else {\n            err = new Error(\"Unknown export format '\".concat(format, \"'\"));\n          }\n        } catch (_err) {\n          err = _err;\n        }\n\n        callback(err, pem);\n      });\n    }\n  }]);\n\n  return RsaPrivateKey;\n}();\n\nfunction unmarshalRsaPrivateKey(bytes, callback) {\n  var jwk = crypto.utils.pkcs1ToJwk(bytes);\n  crypto.unmarshalPrivateKey(jwk, function (err, keys) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey));\n  });\n}\n\nfunction unmarshalRsaPublicKey(bytes) {\n  var jwk = crypto.utils.pkixToJwk(bytes);\n  return new RsaPublicKey(jwk);\n}\n\nfunction fromJwk(jwk, callback) {\n  crypto.unmarshalPrivateKey(jwk, function (err, keys) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey));\n  });\n}\n\nfunction generateKeyPair(bits, callback) {\n  crypto.generateKey(bits, function (err, keys) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey));\n  });\n}\n\nfunction ensure(callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('callback is required');\n  }\n}\n\nmodule.exports = {\n  RsaPublicKey: RsaPublicKey,\n  RsaPrivateKey: RsaPrivateKey,\n  unmarshalRsaPublicKey: unmarshalRsaPublicKey,\n  unmarshalRsaPrivateKey: unmarshalRsaPrivateKey,\n  generateKeyPair: generateKeyPair,\n  fromJwk: fromJwk\n};","map":{"version":3,"sources":["/home/wskj/src/node_modules/libp2p-crypto/src/keys/rsa-class.js"],"names":["multihashing","require","protobuf","bs58","crypto","pbm","forge","setImmediate","RsaPublicKey","key","_key","data","sig","callback","ensure","hashAndVerify","utils","jwkToPkix","PublicKey","encode","Type","KeyType","RSA","Data","marshal","bytes","encrypt","equals","RsaPrivateKey","publicKey","_publicKey","getRandomValues","Uint8Array","message","hashAndSign","Error","msg","decrypt","jwkToPkcs1","PrivateKey","public","hash","err","format","password","pem","buffer","util","ByteBuffer","asn1","fromDer","privateKey","pki","privateKeyFromAsn1","options","algorithm","count","saltSize","prfAlgorithm","encryptRsaPrivateKey","_err","unmarshalRsaPrivateKey","jwk","pkcs1ToJwk","unmarshalPrivateKey","keys","unmarshalRsaPublicKey","pkixToJwk","fromJwk","generateKeyPair","bits","generateKey","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst multihashing = require('multihashing-async')\nconst protobuf = require('protons')\nconst bs58 = require('bs58')\n\nconst crypto = require('./rsa')\nconst pbm = protobuf(require('./keys.proto'))\nconst forge = require('node-forge')\nconst setImmediate = require('async/setImmediate')\n\nclass RsaPublicKey {\n  constructor (key) {\n    this._key = key\n  }\n\n  verify (data, sig, callback) {\n    ensure(callback)\n    crypto.hashAndVerify(this._key, sig, data, callback)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkix(this._key)\n  }\n\n  get bytes () {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    })\n  }\n\n  encrypt (bytes) {\n    return this._key.encrypt(bytes, 'RSAES-PKCS1-V1_5')\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n}\n\nclass RsaPrivateKey {\n  // key       - Object of the jwk format\n  // publicKey - Buffer of the spki format\n  constructor (key, publicKey) {\n    this._key = key\n    this._publicKey = publicKey\n  }\n\n  genSecret () {\n    return crypto.getRandomValues(new Uint8Array(16))\n  }\n\n  sign (message, callback) {\n    ensure(callback)\n    crypto.hashAndSign(this._key, message, callback)\n  }\n\n  get public () {\n    if (!this._publicKey) {\n      throw new Error('public key not provided')\n    }\n\n    return new RsaPublicKey(this._publicKey)\n  }\n\n  decrypt (msg, callback) {\n    crypto.decrypt(this._key, msg, callback)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkcs1(this._key)\n  }\n\n  get bytes () {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    })\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @param {function(Error, id)} callback\n   * @returns {undefined}\n   */\n  id (callback) {\n    this.public.hash((err, hash) => {\n      if (err) {\n        return callback(err)\n      }\n      callback(null, bs58.encode(hash))\n    })\n  }\n\n  /**\n   * Exports the key into a password protected PEM format\n   *\n   * @param {string} [format] - Defaults to 'pkcs-8'.\n   * @param {string} password - The password to read the encrypted PEM\n   * @param {function(Error, KeyInfo)} callback\n   * @returns {undefined}\n   */\n  export (format, password, callback) {\n    if (typeof password === 'function') {\n      callback = password\n      password = format\n      format = 'pkcs-8'\n    }\n\n    ensure(callback)\n\n    setImmediate(() => {\n      let err = null\n      let pem = null\n      try {\n        const buffer = new forge.util.ByteBuffer(this.marshal())\n        const asn1 = forge.asn1.fromDer(buffer)\n        const privateKey = forge.pki.privateKeyFromAsn1(asn1)\n\n        if (format === 'pkcs-8') {\n          const options = {\n            algorithm: 'aes256',\n            count: 10000,\n            saltSize: 128 / 8,\n            prfAlgorithm: 'sha512'\n          }\n          pem = forge.pki.encryptRsaPrivateKey(privateKey, password, options)\n        } else {\n          err = new Error(`Unknown export format '${format}'`)\n        }\n      } catch (_err) {\n        err = _err\n      }\n\n      callback(err, pem)\n    })\n  }\n}\n\nfunction unmarshalRsaPrivateKey (bytes, callback) {\n  const jwk = crypto.utils.pkcs1ToJwk(bytes)\n\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction unmarshalRsaPublicKey (bytes) {\n  const jwk = crypto.utils.pkixToJwk(bytes)\n\n  return new RsaPublicKey(jwk)\n}\n\nfunction fromJwk (jwk, callback) {\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction generateKeyPair (bits, callback) {\n  crypto.generateKey(bits, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction ensure (callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('callback is required')\n  }\n}\n\nmodule.exports = {\n  RsaPublicKey,\n  RsaPrivateKey,\n  unmarshalRsaPublicKey,\n  unmarshalRsaPrivateKey,\n  generateKeyPair,\n  fromJwk\n}\n"]},"metadata":{},"sourceType":"script"}