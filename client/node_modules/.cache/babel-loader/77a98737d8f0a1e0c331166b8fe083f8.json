{"ast":null,"code":"'use strict';\n\nvar base58 = require('bs58');\n\nvar multihash = require('multihashes');\n\nvar multibase = require('multibase');\n\nvar CID = require('cids');\n\nvar urlPattern = /^https?:\\/\\/[^/]+\\/(ip(f|n)s)\\/((\\w+).*)/;\nvar pathPattern = /^\\/(ip(f|n)s)\\/((\\w+).*)/;\nvar defaultProtocolMatch = 1;\nvar defaultHashMath = 4;\nvar fqdnPattern = /^https?:\\/\\/([^/]+)\\.(ip(?:f|n)s)\\.[^/]+/;\nvar fqdnHashMatch = 1;\nvar fqdnProtocolMatch = 2;\n\nfunction isMultihash(hash) {\n  var formatted = convertToString(hash);\n\n  try {\n    var buffer = Buffer.from(base58.decode(formatted));\n    multihash.decode(buffer);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isMultibase(hash) {\n  try {\n    return multibase.isEncoded(hash);\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isCID(hash) {\n  try {\n    return CID.isCID(new CID(hash));\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isIpfs(input, pattern) {\n  var protocolMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProtocolMatch;\n  var hashMatch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultHashMath;\n  var formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  var match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false;\n  }\n\n  var hash = match[hashMatch];\n\n  if (hash && pattern === fqdnPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase();\n  }\n\n  return isCID(hash);\n}\n\nfunction isIpns(input, pattern) {\n  var protocolMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProtocolMatch;\n  var hashMatch = arguments.length > 3 ? arguments[3] : undefined;\n  var formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  var match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false;\n  }\n\n  if (hashMatch && pattern === fqdnPattern) {\n    var hash = match[hashMatch]; // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n\n    hash = hash.toLowerCase();\n    return isCID(hash);\n  }\n\n  return true;\n}\n\nfunction convertToString(input) {\n  if (Buffer.isBuffer(input)) {\n    return base58.encode(input);\n  }\n\n  if (typeof input === 'string') {\n    return input;\n  }\n\n  return false;\n}\n\nvar ipfsSubdomain = function ipfsSubdomain(url) {\n  return isIpfs(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch);\n};\n\nvar ipnsSubdomain = function ipnsSubdomain(url) {\n  return isIpns(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch);\n};\n\nmodule.exports = {\n  multihash: isMultihash,\n  cid: isCID,\n  base32cid: function base32cid(cid) {\n    return isMultibase(cid) === 'base32' && isCID(cid);\n  },\n  ipfsSubdomain: ipfsSubdomain,\n  ipnsSubdomain: ipnsSubdomain,\n  subdomain: function subdomain(url) {\n    return ipfsSubdomain(url) || ipnsSubdomain(url);\n  },\n  subdomainPattern: fqdnPattern,\n  ipfsUrl: function ipfsUrl(url) {\n    return isIpfs(url, urlPattern);\n  },\n  ipnsUrl: function ipnsUrl(url) {\n    return isIpns(url, urlPattern);\n  },\n  url: function url(_url) {\n    return isIpfs(_url, urlPattern) || isIpns(_url, urlPattern);\n  },\n  urlPattern: urlPattern,\n  ipfsPath: function ipfsPath(path) {\n    return isIpfs(path, pathPattern);\n  },\n  ipnsPath: function ipnsPath(path) {\n    return isIpns(path, pathPattern);\n  },\n  path: function path(_path) {\n    return isIpfs(_path, pathPattern) || isIpns(_path, pathPattern);\n  },\n  pathPattern: pathPattern,\n  urlOrPath: function urlOrPath(x) {\n    return isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern);\n  }\n};","map":{"version":3,"sources":["/home/will/src/fstudy/client/node_modules/is-ipfs/src/index.js"],"names":["base58","require","multihash","multibase","CID","urlPattern","pathPattern","defaultProtocolMatch","defaultHashMath","fqdnPattern","fqdnHashMatch","fqdnProtocolMatch","isMultihash","hash","formatted","convertToString","buffer","Buffer","from","decode","e","isMultibase","isEncoded","isCID","isIpfs","input","pattern","protocolMatch","hashMatch","match","toLowerCase","isIpns","isBuffer","encode","ipfsSubdomain","url","ipnsSubdomain","module","exports","cid","base32cid","subdomain","subdomainPattern","ipfsUrl","ipnsUrl","ipfsPath","path","ipnsPath","urlOrPath","x"],"mappings":"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","sourcesContent":["'use strict'\n\nconst base58 = require('bs58')\nconst multihash = require('multihashes')\nconst multibase = require('multibase')\nconst CID = require('cids')\n\nconst urlPattern = /^https?:\\/\\/[^/]+\\/(ip(f|n)s)\\/((\\w+).*)/\nconst pathPattern = /^\\/(ip(f|n)s)\\/((\\w+).*)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 4\n\nconst fqdnPattern = /^https?:\\/\\/([^/]+)\\.(ip(?:f|n)s)\\.[^/]+/\nconst fqdnHashMatch = 1\nconst fqdnProtocolMatch = 2\n\nfunction isMultihash (hash) {\n  const formatted = convertToString(hash)\n  try {\n    const buffer = Buffer.from(base58.decode(formatted))\n    multihash.decode(buffer)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isMultibase (hash) {\n  try {\n    return multibase.isEncoded(hash)\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isCID (hash) {\n  try {\n    return CID.isCID(new CID(hash))\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash && pattern === fqdnPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  if (hashMatch && pattern === fqdnPattern) {\n    let hash = match[hashMatch]\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase()\n    return isCID(hash)\n  }\n\n  return true\n}\n\nfunction convertToString (input) {\n  if (Buffer.isBuffer(input)) {\n    return base58.encode(input)\n  }\n\n  if (typeof input === 'string') {\n    return input\n  }\n\n  return false\n}\n\nconst ipfsSubdomain = (url) => isIpfs(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch)\nconst ipnsSubdomain = (url) => isIpns(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch)\n\nmodule.exports = {\n  multihash: isMultihash,\n  cid: isCID,\n  base32cid: (cid) => (isMultibase(cid) === 'base32' && isCID(cid)),\n  ipfsSubdomain: ipfsSubdomain,\n  ipnsSubdomain: ipnsSubdomain,\n  subdomain: (url) => (ipfsSubdomain(url) || ipnsSubdomain(url)),\n  subdomainPattern: fqdnPattern,\n  ipfsUrl: (url) => isIpfs(url, urlPattern),\n  ipnsUrl: (url) => isIpns(url, urlPattern),\n  url: (url) => (isIpfs(url, urlPattern) || isIpns(url, urlPattern)),\n  urlPattern: urlPattern,\n  ipfsPath: (path) => isIpfs(path, pathPattern),\n  ipnsPath: (path) => isIpns(path, pathPattern),\n  path: (path) => (isIpfs(path, pathPattern) || isIpns(path, pathPattern)),\n  pathPattern: pathPattern,\n  urlOrPath: (x) => (isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern))\n}\n"]},"metadata":{},"sourceType":"script"}