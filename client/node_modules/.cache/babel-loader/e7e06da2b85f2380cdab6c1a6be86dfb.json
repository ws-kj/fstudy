{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/wskj/src/fstudy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/wskj/src/fstudy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar assert = require('assert');\n\nvar withIs = require('class-is');\n\nvar CID = require('cids');\n\nvar DAGNode = /*#__PURE__*/function () {\n  function DAGNode(data, links, serialized, multihash) {\n    _classCallCheck(this, DAGNode);\n\n    assert(serialized, 'DAGNode needs its serialized format');\n    assert(multihash, 'DAGNode needs its multihash');\n    this._cid = new CID(multihash);\n    this._data = data || Buffer.alloc(0);\n    this._links = links || [];\n    this._serialized = serialized;\n  }\n\n  _createClass(DAGNode, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (!this._json) {\n        this._json = Object.freeze({\n          data: this.data,\n          links: this.links.map(function (l) {\n            return l.toJSON();\n          }),\n          multihash: this._cid.toBaseEncodedString(),\n          size: this.size\n        });\n      }\n\n      return Object.assign({}, this._json);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"DAGNode <\".concat(this._cid.toBaseEncodedString(), \" - data: \\\"\").concat(this.data.toString(), \"\\\", links: \").concat(this.links.length, \", size: \").concat(this.size, \">\");\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    },\n    set: function set(data) {\n      throw new Error(\"Can't set property: 'data' is immutable\");\n    }\n  }, {\n    key: \"links\",\n    get: function get() {\n      return this._links;\n    },\n    set: function set(links) {\n      throw new Error(\"Can't set property: 'links' is immutable\");\n    }\n  }, {\n    key: \"serialized\",\n    get: function get() {\n      return this._serialized;\n    },\n    set: function set(serialized) {\n      throw new Error(\"Can't set property: 'serialized' is immutable\");\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      if (this._size === undefined) {\n        this._size = this.links.reduce(function (sum, l) {\n          return sum + l.size;\n        }, this.serialized.length);\n      }\n\n      return this._size;\n    },\n    set: function set(size) {\n      throw new Error(\"Can't set property: 'size' is immutable\");\n    }\n  }, {\n    key: \"multihash\",\n    get: function get() {\n      return this._cid.buffer;\n    },\n    set: function set(multihash) {\n      throw new Error(\"Can't set property: 'multihash' is immutable\");\n    }\n  }, {\n    key: \"cid\",\n    get: function get() {\n      return this._cid;\n    },\n    set: function set(cid) {\n      throw new Error(\"Can't set property: 'cid' is immutable\");\n    }\n  }]);\n\n  return DAGNode;\n}();\n\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});\nexports.create = require('./create');\nexports.clone = require('./clone');\nexports.addLink = require('./addLink');\nexports.rmLink = require('./rmLink');","map":{"version":3,"sources":["/home/wskj/src/node_modules/ipld-dag-pb/src/dag-node/index.js"],"names":["assert","require","withIs","CID","DAGNode","data","links","serialized","multihash","_cid","_data","Buffer","alloc","_links","_serialized","_json","Object","freeze","map","l","toJSON","toBaseEncodedString","size","assign","toString","length","Error","_size","undefined","reduce","sum","buffer","cid","exports","module","className","symbolName","create","clone","addLink","rmLink"],"mappings":"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","sourcesContent":["'use strict'\n\nconst assert = require('assert')\nconst withIs = require('class-is')\nconst CID = require('cids')\n\nclass DAGNode {\n  constructor (data, links, serialized, multihash) {\n    assert(serialized, 'DAGNode needs its serialized format')\n    assert(multihash, 'DAGNode needs its multihash')\n\n    this._cid = new CID(multihash)\n    this._data = data || Buffer.alloc(0)\n    this._links = links || []\n    this._serialized = serialized\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.data,\n        links: this.links.map((l) => l.toJSON()),\n        multihash: this._cid.toBaseEncodedString(),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <${this._cid.toBaseEncodedString()} - data: \"${this.data.toString()}\", links: ${this.links.length}, size: ${this.size}>`\n  }\n\n  get data () {\n    return this._data\n  }\n\n  set data (data) {\n    throw new Error(\"Can't set property: 'data' is immutable\")\n  }\n\n  get links () {\n    return this._links\n  }\n\n  set links (links) {\n    throw new Error(\"Can't set property: 'links' is immutable\")\n  }\n\n  get serialized () {\n    return this._serialized\n  }\n\n  set serialized (serialized) {\n    throw new Error(\"Can't set property: 'serialized' is immutable\")\n  }\n\n  get size () {\n    if (this._size === undefined) {\n      this._size = this.links.reduce((sum, l) => sum + l.size, this.serialized.length)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get multihash () {\n    return this._cid.buffer\n  }\n\n  set multihash (multihash) {\n    throw new Error(\"Can't set property: 'multihash' is immutable\")\n  }\n\n  get cid () {\n    return this._cid\n  }\n\n  set cid (cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGNode, { className: 'DAGNode', symbolName: '@ipld/js-ipld-dag-pb/dagnode' })\nexports.create = require('./create')\nexports.clone = require('./clone')\nexports.addLink = require('./addLink')\nexports.rmLink = require('./rmLink')\n"]},"metadata":{},"sourceType":"script"}