[{"/home/wskj/src/fstudy/client/src/index.js":"1","/home/wskj/src/fstudy/client/src/reportWebVitals.js":"2","/home/wskj/src/fstudy/client/src/App.js":"3","/home/wskj/src/fstudy/client/src/web3.js":"4","/home/wskj/src/fstudy/client/src/ipfs.js":"5","/home/wskj/src/fstudy/client/src/storehash.js":"6"},{"size":591,"mtime":1637020063773,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1637016037740,"results":"9","hashOfConfig":"8"},{"size":5106,"mtime":1637207163458,"results":"10","hashOfConfig":"8"},{"size":126,"mtime":1637027814150,"results":"11","hashOfConfig":"8"},{"size":137,"mtime":1637017358000,"results":"12","hashOfConfig":"8"},{"size":1735,"mtime":1637194650962,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gjf959",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/wskj/src/fstudy/client/src/index.js",[],"/home/wskj/src/fstudy/client/src/reportWebVitals.js",[],"/home/wskj/src/fstudy/client/src/App.js",["27","28","29"],"import {Table, Container, Button, Form} from 'react-bootstrap';\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport web3 from './web3.js'\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass Guide extends Component {\n    state = {\n        title:'Chinese to English Unit 1',\n        cards:{\"Wo\":\"Me\", \"Ni\":\"You\", \"Hao\":\"Good\"},\n    };\n\n    pack = () => {\n        let j = {};\n        j[this.state.title] = this.state.cards;\n        return(Buffer.from(JSON.stringify(j)));\n    }\n\n    unpack = (buf) => {\n        let json = JSON.parse(buf.toString());\n        for(const p in json) {\n            this.state.title = p;\n            this.state.cards = json[p];\n        }\n    }\n\n    render() {\n        const items = Object.entries(this.state.cards).map(([f, b]) =>\n            <Card front={f} back={b}/>\n        );\n        return (\n            <div className=\"guide\">\n                <p>{this.state.title}</p>\n                {items}\n            </div>\n        );\n    }\n}\n\nclass Card extends Component {\n    render() {\n        return (\n            <div className=\"card\">\n                <div className=\"card-face\">\n                    <p>{this.props.front}</p>\n                </div>\n                <div className=\"card-face\">\n                    <p>{this.props.back}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default class App extends Component {\n    state = {\n        guide:null,\n        ipfsHash:null,\n        buffer:'',\n        guideBuffer:'',\n        title:'',\n        ethAddress:'',\n        blockNumber:'',\n        transactionHash:'',\n        gasUsed:'',\n        txReceipt:''\n    };\n    \n    setTitle = (event) => {\n        this.setState({title: event.target.value});\n    };\n\n    convertToBuffer = async(reader) => {\n        const buffer = await Buffer.from(reader.result);\n        this.setState({buffer});\n    };\n\n    onClick = async () => {\n        try {\n            this.setState({blockNumber:\"waiting...\"});\n            this.setState({gasUsed:\"waiting...\"});\n            await web3.eth.getTransactionReceipt(this.state.transactionHash, (txReceipt)  =>{\n                console.log(txReceipt);\n                this.setState({txReceipt});\n                });\n            await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n            await this.setState({gasUsed: this.statetxReceipt.gasUsed}); \n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    onSubmit = async (event) => {\n        event.preventDefault();\n/*        \n        //test\n        web3.eth.getAccounts(console.log)\n\n        const accounts = await web3.eth.getAccounts()\n\n        console.log('Sending from Metamask account ' + accounts[0]);\n        */\n        const ethAddress = await storehash.options.address;\n        this.setState({ethAddress});\n\n        this.setState({guide:new Guide()});\n        this.setState({buffer:this.state.guide.pack()});\n        await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n            console.log(err,ipfsHash);\n            this.setState({ ipfsHash:ipfsHash[0].hash });\n\n            storehash.methods.sendGuide(this.state.title, this.state.ipfsHash).send(\n            {from: null}, (error, transactionHash) => {\n                console.log(transactionHash);\n                this.setState({transactionHash});\n            });\n        })\n    };\n\n    loadGuide = (guide) => {\n\n    }\n\n    render() {\n        return (\n\n<div className=\"App\">\n    <Container>\n        <h3>Upload Guide</h3>\n        <Form onSubmit={this.onSubmit}>\n            <input\n                type = \"text\"\n                value = {this.state.Title} \n                onChange = {this.setTitle}\n            />\n            \n            <Button bsStyle=\"primary\" type=\"submit\">\n                Upload!\n            </Button>\n        </Form>\n        <hr />\n        <Button onClick = {this.onClick}>Get Receipt</Button>\n        <Table bordered responsive>\n            <thead>\n                <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Link</td>\n                    <td>https://gateway.ipfs.io/ipfs/{this.state.ipfsHash}</td>\n                </tr>\n                <tr>\n                    <td>IPFS Hash # on Contract</td>\n                    <td>{this.state.ipfsHash}</td>\n                </tr>\n                <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td>{this.state.ethAddress}</td>\n                </tr>\n                <tr>\n                    <td>Tx Hash # </td>\n                    <td>{this.state.transactionHash}</td>\n                </tr>\n                <tr>\n                    <td>Block #</td>\n                    <td>{this.state.blockNumber}</td>\n                </tr>\n                <tr>\n                    <td>Gas Used</td>\n                    <td>{this.state.gasUsed}</td>\n                </tr>\n            </tbody>\n        </Table>\n    <Guide/>\n    </Container>\n</div>\n\n        );\n    };\n}\n","/home/wskj/src/fstudy/client/src/web3.js",[],"/home/wskj/src/fstudy/client/src/ipfs.js",[],"/home/wskj/src/fstudy/client/src/storehash.js",[],{"ruleId":"30","severity":1,"message":"31","line":3,"column":8,"nodeType":"32","messageId":"33","endLine":3,"endColumn":12},{"ruleId":"34","severity":1,"message":"35","line":24,"column":13,"nodeType":"36","endLine":24,"endColumn":23},{"ruleId":"34","severity":1,"message":"35","line":25,"column":13,"nodeType":"36","endLine":25,"endColumn":23},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression"]